10000000,"0:1000000000","RadixBitSorterInt",191->146
10000000,"0:1000000000","RadixByteSorterInt",139->145


40000000,"0:1000000000","RadixBitSorterInt",809->595
40000000,"0:1000000000","RadixByteSorterInt",579 ->592


6/8/22
  6/9/22 *2 
   *15/9/22
ST
10000000,"0:1000000000","JavaSorterInt",847
10000000,"0:1000000000","QuickBitSorterInt",817->$638->$$663
10000000,"0:1000000000","RadixBitSorterInt",159->157->158->153*->144%->142-144$  ->144$$
10000000,"0:1000000000","RadixByteSorterInt",172->170->171->171*->174%->141-144$  ->  138$$
40000000,"0:1000000000","JavaSorterInt",3687
40000000,"0:1000000000","QuickBitSorterInt",2812->2735%->2505$->2523$$
40000000,"0:1000000000","RadixBitSorterInt",702->700->690->668*->560%->609-618$->576$$
40000000,"0:1000000000","RadixByteSorterInt",708->703->698->700*->699%->568-578$     571&&%%->556$$
MT
10000000,"0:1000000000","JavaParallelSorterInt",107->91$
10000000,"0:1000000000","QuickBitSorterMTInt",187->182*->185**->147%->147%%->132-134$->139$$
10000000,"0:1000000000","MixedBitSorterMTInt",141->137*->144**->140%->103%%->101-104$->116$$
10000000,"0:1000000000","RadixBitSorterMTInt",91->83*->82**->78%->81%%->76-81$->86$$
40000000,"0:1000000000","JavaParallelSorterInt",417->399$
40000000,"0:1000000000","QuickBitSorterMTInt",571->562*->573**->529%->542%%->524$->503-501$->547$$
40000000,"0:1000000000","MixedBitSorterMTInt",580->571*->588*->586%->422%%->422-423$->418$$
40000000,"0:1000000000","RadixBitSorterMTInt",380->357*->344**->331%->342%%->328-330$->353$$

* inlined toPowerX and getMaskBit functions
**Some refactors to remove duplicate radix code. RadixBitSorterMTInt has equal or better speed but MixedBixSortertMTInt has a little reduced performance
%Improved RadixBitSorter ST and MT
%%improved MixedBitSorterMTInt performance
$